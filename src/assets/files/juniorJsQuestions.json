{
  "Questions": [
    {
      "number" : "1",
      "question" : "Может ли JavaScript обрабатываться в системе без браузера? Если да, то каким образом?",
      "explanation": "Да, При помощи платформы <i>node.js</i>, построенной на движке V8",
      "link": "https://nodejs.org/ru"
    },
    {
      "number" : "2",
      "question" : "Что такое ECMAScript (ES)?",
      "explanation": "ECMAScript — это встраиваемый расширяемый не имеющий средств ввода-вывода язык программирования, используемый в качестве основы для построения других скриптовых языков. JavaScript — язык программирования. ECMAScript — это спецификация, на которой он основан. Из спецификации ECMAScript вы узнаете, как создать скриптовый язык, а из документации JavaScript — как использовать скриптовый язык. Проще говоря, ECMAScript стандартизирован международной организацией ECMA в спецификации ECMA-262. ECMAScript - Это стандарт, а JavaScript - самая популярная его реализация.",
      "link": "https://habr.com/ru/companies/nix/articles/342904/"
    },
    {
      "number" : "3",
      "question" : "Что такое JavaScript?",
      "explanation": "JavaScript — скриптовый мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. Является реализацией спецификации ECMAScript. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript"
    },
    {
      "number" : "4",
      "question" : "Как разделяются отдельные инструкции (команды) в JavaScript?",
      "explanation": "Точка с запятой",
      "link": ""
    },
    {
      "number" : "5",
      "question" : "Допускается ли не ставить в конце инструкции точку с запятой в языке JavaScript? Если да, то в каких случаях?",
      "explanation": "В языке JavaScript допускается не ставить точку с запятой в конце инструкции, если следующая инструкция начинается с новой строки. Но это работает не всегда. ",
      "link": "https://www.vk.com/"
    },
    {
      "number" : "6",
      "question" : "Что могут вкулючать в себя инструкциии (команды) в JavaScript?",
      "explanation": "Инструкции в JavaScript могут включать в себя значения, операторы, выражения, ключевые слова и комментарии.",
      "link": ""
    },
    {
      "number" : "7",
      "question" : "Какие есть типы значений (values) в JavaScript?",
      "explanation": "Литералы (фиксированные значения), константы и переменные",
      "link": ""
    },
    {
      "number" : "8",
      "question" : "Что такое выражения в JavaScript?",
      "explanation": "<p>Выражения (expression) - это комбинация значений, переменных и операторов, которые либо присваивают переменной значение, либо возвращают какое-то значение без его присваивания.</p><img src='assets/img/questions/juniorJsQuestions/8.jpg' alt=''>",
      "link": ""
    },
    {
      "number" : "9",
      "question" : "Что такое ключевые слова в JavaScript?",
      "explanation": "Инструкции JavaScript часто нацинаются с ключевого слова (keyword). Оно (ключевое слово) предназначено для того, определить, какое действие JavaScript необходимо выполнить.<img src='assets/img/questions/juniorJsQuestions/9.jpg'>",
      "link": ""
    },
    {
      "number" : "10",
      "question" : "Что такое блок инструкций в JavaScript?",
      "explanation": "JavaScript инструкции можно сгруппировать с помощью так называемого блока, по сути фигурных скобок {...}. Как правило, искользуется в функциях, циклах и так далее..",
      "link": ""
    },
    {
      "number" : "11",
      "question" : "Как записываются комментарии в JavaScript?",
      "explanation": "Одностроыне комментарии начинаются с вимволов //, а многострочные комментарии записываются междку /*  и   */. Вкладывать многострочные комментарии друг в друга запрещено, что вызовет ошибку в коде. <img src='assets/img/questions/juniorJsQuestions/11.jpg'>",
      "link": ""
    },
    {
      "number" : "12",
      "question" : "Зависит ли JavaScript,  в том числе написание имен функций, переменных и пр. от регистра?",
      "explanation": "JavaScript является регистрозависимым языком. Это значит, что ключевые слова, переменные, имена функций и другие идентификаторы языка должны содержать одинаковые наборы прописных и строчных цифр.",
      "link": ""
    },
    {
      "number" : "13",
      "question" : "Использование пробелов для создания более читабельного кода JavaScript. В каких случаях рекомендовано использовать? Как JavaScript реагирует на 2 и более пробела подряд?",
      "explanation": "Чтобы сделать код более читаемым, в инструкции рекомендуется добавлять пробелы. Как правило, пробелы размещаются вокруг операторов =, +, =, *, /. Несколько пробелов подряд JavaScript игнорирует.",
      "link": ""
    },
    {
      "number" : "14",
      "question" : "Как достигается лучшая читаемость кода за счет ограничения длины строки в JavaScript?",
      "explanation": "Для лучшей читаемости кода рекомендуется избегать строк длиной более 80 символов.Если JavaScript инструкция имеет большую длину, то ее желательно разорвать. В большинстве случаев разрыв инструкции лучше осуществить после какого-либо оператора. <img src='assets/img/questions/juniorJsQuestions/14.jpg'>",
      "link": ""
    },
    {
      "number" : "15",
      "question" : "Какие кавычки могут использоваться в JavaScript?",
      "explanation": "В JavaScript могут использовать одинарные, двойные и обратные кавычки. Любая открытая кавычка должна быть закрыта, иначе вызовет ошибку. <img src='assets/img/questions/juniorJsQuestions/15.jpg'>",
      "link": ""
    },
    {
      "number" : "16",
      "question" : "Что такое 'use strict' в JavaScript? Для чего используется?",
      "explanation": "При появлении стандарта ECMAScript 5 в JavaScript появились новые возможности, а так же изменились некоторые из существующих. Чтобы старый код адекватно работал, по умолчанию новые функции выключены. Чтобы их использовать, необходимо явно их включить записью 'use strict' (в одинарных или двойных кавычках). Запись размещается над всем выполняемым кодом, иначе работать не будет. Перед 'use strict' допускается размещение только комментариев. Также можно указать 'use strict' вначале функции, что даст возможность строгому режиму распространятся только на эту функцию. Стоит отметить, что Е9 и версии ниже не поддерживают строгий режим.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode"
    },
    {
      "number" : "17",
      "question" : "Что такое строгий режим в JavaScript? Для чего используется",
      "explanation": "При появлении стандарта ECMAScript 5 в JavaScript появились новые возможности, а так же изменились некоторые из существующих. Чтобы старый код адекватно работал, по умолчанию новые функции выключены. Чтобы их использовать, необходимо явно их включить записью 'use strict' (в одинарных или двойных кавычках). Запись размещается над всем выполняемым кодом, иначе работать не будет. Перед 'use strict' допускается размещение только комментариев. Также можно указать 'use strict' вначале функции, что даст возможность строгому режиму распространятся только на эту функцию. Стоит отметить, что Е9 и версии ниже не поддерживают строгий режим.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode"
    },
    {
      "number" : "18",
      "question" : "Что такое переменная в JavaScript?",
      "explanation": "переменная определяется как имя, с которым может быть связано значение. ПРостыми словами, это некий контейнер, в котором содержится значение. В процессе выполнения программы значение, присвоенное переменной, может быть изменено. Переменная — именованная часть памяти, в которую могут помещаться разные значения переменной. Причём в каждый момент времени переменная имеет единственное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Glossary/Variable"
    },
    {
      "number" : "19",
      "question" : "Какие правила объявления переменных в JavaScript?",
      "explanation": "Имя переменной может содержать только буквы, лучше латинского алфавита, цифры и символы '$' и '_'. Первый символ никогда не должен быть цифрой. <img src='assets/img/questions/juniorJsQuestions/19.jpg'> Имя переменной должно соответствовать ее содержимому, чтобы тому, кто работает с кодом, было понятно, что в ней хранится. Для имени переменной, состоящего из нескольких слов, используется стиль lowerCamelCase. Нелатинские символы разрешены, но их использование не рекомендовано. В качестве имен переменных нельзя использовать зарезервырованные имена, которые используются самим языком JS (let, break и т.д.) <a href='https://fls.guru/js-reservedkeywords.html' target='_blank'>Список зарезервырованых имен</a>",
      "link": ""
    },
    {
      "number" : "20",
      "question" : "Какими способами можно записать объявление нескольких переменных?",
      "explanation": "В строку через запятую: <img src='assets/img/questions/juniorJsQuestions/20.jpg'> Через запятую с новой строки: <img src='assets/img/questions/juniorJsQuestions/20_1.jpg'> Отдельно: <img src='assets/img/questions/juniorJsQuestions/20_2.jpg'>",
      "link": ""
    },
    {
      "number" : "21",
      "question" : "Какая область видимости переменных <i>let</i> в JavaScript?",
      "explanation": "Блочная",
      "link": ""
    },
    {
      "number" : "22",
      "question" : "Можно ли изменить значения констант <i>const</i> в JavaScript?",
      "explanation": "Значение констант не может быть изменено новым присваиванием, а также не может быть переопределено. Константы (const) подчиняются области видимости уровня блока так же, как переменные, объявленные с использованием ключевого слова let. Изменять же можно лишь значения внутри некоторых типов. Например, попытка переопределить массив или объект вызовет ошибку, в то время как свойства объектов (ключи) изменять можно",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const"
    },
    {
      "number" : "23",
      "question" : "В чем отличия <i>var</i> и <i>let</i> в JavaScript?",
      "explanation": "В отличии от let, переменную, объявленную при помощи ключевого слова var можно использовать до объявления (независимо от наличия строгого режима). Область видимости var - функциональная, то есть переменная будет видна за пределами блока, но невидна за пределами функции, внутри которой она была объявлена.",
      "link": ""
    },
    {
      "number" : "24",
      "question" : "С помощью какого оператора можно получить тип данных переменной в JavaScript?",
      "explanation": "Оператор typeof возвращает строку, указывающую тип операнда.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/typeof"
    },
    {
      "number" : "25",
      "question" : "Какие типы данных существуют в JavaScript?",
      "explanation": "В JavaScript сущестуют 9 типов данных: undefined, Null, Boolean, Number, BigInt, String, Symbol, Object, Function. Последний тип данных function является по сути object, но выведен в отдельный тип для простоты определения типа для функции.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures"
    },
    {
      "number" : "26",
      "question" : "Какие типы данных в JavaScript являются примитивами?",
      "explanation": "В JavaScript 6 типов данных являющихся примитивами: undefined, Boolean, Number, BigInt, String, Symbol. Null - специальный примитив, используемый не только для данных но и в качестве указателя на финальную точку в Цепочке Прототипов",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures"
    },
    {
      "number" : "27",
      "question" : "В каком случае <i>typeof</i> в JavaScript вернет <i>undefined</i>?",
      "explanation": "Переменная возвращает тип данных undefined, если она бы объявлена, но не определена (небыло присвоено никакого значения).",
      "link": ""
    },
    {
      "number" : "28",
      "question" : "Как проверить, определена ли переменная в JavaScript?",
      "explanation": "Чтобы проверить, определена ли переменная в JavaScript, можно воспользоваться одним из двух способов: <p>Проверка по значению</p><img src='assets/img/questions/juniorJsQuestions/28.jpg'><p>Проверка по типу</p><img src='assets/img/questions/juniorJsQuestions/28_1.jpg'>",
      "link": ""
    },
    {
      "number" : "29",
      "question" : "Что означает значение <i>Null</i> переменной? Какой тип имеет переменная со значением <i>Null</i> в JavaScript?",
      "explanation": "Null - специальное значение, которое указывает, что переменная определена, но ее значение буквально 'ничего'. Тип переменной со значением Null - object. Это признанная ошибка, намеренно оставленная для сохранения совместимости. Значение null представляет отсутствие какого-либо объектного значения. В JavaScript, null является примитивом, и в контексте логических операций, рассматривается как ложное (falsy). В API, null часто присутствует в местах где ожидается объект, но подходящего объекта нет.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/null"
    },
    {
      "number" : "30",
      "question" : "Какие цифровые значения, кроме, собственно, цифр и чисел, возвращают тип данных <i>number</i> в JavaScript?",
      "explanation": "В JavaScript кроме чисел возвращают тип данных number также специальные числовые значения Infinity, -Infinity и NaN (Not a Number)",
      "link": ""
    },
    {
      "number" : "31",
      "question" : "Что такое <i>Infinity</i> и <i>-Infinity</i> в JavaScript и как его получить?",
      "explanation": "В JavaScript Infinity - математическая бесконечность, значение, которое больше любого числа. Получить его можно разделив любое число на 0. -Infinity, соответственно, можно получить, разделив на 0 отрицательное значение. Тип данных Infinity и -Infinity - number.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Infinity"
    },
    {
      "number" : "32",
      "question" : "Что такое <i>NaN</i> в JavaScript? Какой это тип данных, как получить?",
      "explanation": "NaN (Not a Number) - специальное числовое значение, означающее вычислительную ошибку. Это результат неправильной либо неопределенной математической операции. Тип данных NaN - number.",
      "link": ""
    },
    {
      "number" : "33",
      "question" : "Что представляет собой тип данных <i>BigInt (BigInteger)</i> в JavaScript, зачем был введен и как его получить?",
      "explanation": "В JavaScript тип данных Number не может содержать числа больше 9007199254740991 и меньше -9007199254740991. Это техническое ограничение и связанно с представлением. Тип BigInt был введен, чтобы была возможность работать с целыми числами произвольной длины. Чтобы получить значение такого числа, необхдимо к числомову литералу добавить букву n. <img src='assets/img/questions/juniorJsQuestions/33.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
    },
    {
      "number" : "34",
      "question" : "На какие основные группы можно разделить операторы в JavaScript?",
      "explanation": "Базовые (математические) операторы, операторы сравнения и логические операторы.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "35",
      "question" : "Что такое объект в JavaScript?",
      "explanation": "Объект — это набор необязательных свойств, и каждое свойство состоит из имени (ключа) и значения, ассоциированного с этим именем, разделяются двоеточием. Значением свойства может быть функция, которую можно назвать методом объекта. В дополнение к встроенным в браузер объектам, вы можете определить свои собственные объекты. Пары ключ-значение разделяются запятой",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects"
    },
    {
      "number" : "36",
      "question" : "Строковое преобразование в JavaScript. При помощи какой функции можно изменить тип данных на <i>string</i>?",
      "explanation": "Чтобы изменить тип данных на string, необходимо использовать функцию String(). <img src='assets/img/questions/juniorJsQuestions/36.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String"
    },
    {
      "number" : "37",
      "question" : "При помощи какой функции можно изменить тип данных на number в JavaScript?",
      "explanation": "Чтобы изменить тип данных на string, необходимо использовать функцию Number(). При попытке преобразовать строку, не содержащую числа, в число, результатом будет NaN.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number"
    },
    {
      "number" : "38",
      "question" : "При помощи какой функции можно изменить тип данных на Boolean в JavaScript?",
      "explanation": "Чтобы изменить тип данных на Boolean, необходимо использовать функцию Boolean().",
      "link": ""
    },
    {
      "number" : "39",
      "question" : "Какие операторы называются унарными и бинарными в JavaScript?",
      "explanation": "Унарные операторы применяются только к одному операнду. <img src='assets/img/questions/juniorJsQuestions/39.jpg'> Бинарные операторы применяются к двум операндам. <img src='assets/img/questions/juniorJsQuestions/39_1.jpg'>",
      "link": ""
    },
    {
      "number" : "40",
      "question" : "Что такое операнд (аргумент) в JavaScript?",
      "explanation": "Операнд это то, к чему применяется оператор. Это данные, которые обрабатываются командой.",
      "link": ""
    },
    {
      "number" : "41",
      "question" : "Как называются операторы, которые применяются одному и двум операндам в JavaScript?",
      "explanation": "Унарные и бинарные операторы",
      "link": ""
    },
    {
      "number" : "42",
      "question" : "Какие математические операторы поддерживаются в JavaScript и какими символами они обозначаются?",
      "explanation": "Сложение +, вычитание -, деление /, умножение *, взятие остатка от деления % и возведение в степень **",
      "link": ""
    },
    {
      "number" : "43",
      "question" : "Что получится в результате сложения двух строк в JavaScript и почему? Например, <i>'Олег' + 'Рачко'</i>",
      "explanation": "На выходе получится строка 'ОлегРачко', состоящая из складываемых строк. При сложении строк они конкатенируются.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition"
    },
    {
      "number" : "44",
      "question" : "Что такое конкатенация в JavaScript?",
      "explanation": "Конкатенация - операция объединения (склеивания) объектов. Наиболее часто такая операция выполняется со строками, однако, конкатенировать можно и другие объекты, например, массивы",
      "link": "https://developer.mozilla.org/ru/docs/Learn/JavaScript/First_steps/Strings"
    },
    {
      "number" : "45",
      "question" : "Что получится в результате сложения строки и числа в JavaScript и почему? Например, <i>'Олег' + 12</i>",
      "explanation": "Результат 'Олег12'. При выполнении операции сложения, если хотя бы один операнд является строкой, все остальные операнды преобразовываются в строку и конечный результат также будет строкой.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition"
    },
    {
      "number" : "46",
      "question" : "Что получится в результате сложения нескольких строк и чисел в JavaScript и почему? Например, <i>16 + 12 +'Олег'</i>",
      "explanation": "Результат '28Олег'. Присложении строк с числами последние приводятся к строкам, однако, все операции сложения до первой строки производятся обычно.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition"
    },
    {
      "number" : "47",
      "question" : "Какие математические операторы преобразовывают операнды в числа, а какие в строки в JavaScript?",
      "explanation": "Сложение и преобразование строк это особенность банарного оператора сложения. Другие арифметические операторы работают только с числами, соответственно, преобразовывают все операнды в числа.",
      "link": ""
    },
    {
      "number" : "48",
      "question" : "Для чего используется унарный оператор сложения в JavaScript?",
      "explanation": "Унарный оператор сложения '+' выполняет роль преобразователя в число. <img src='assets/img/questions/juniorJsQuestions/48.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "49",
      "question" : "Можно ли присваивать значения переменным прямо внутри математического выражения, например <i>8 - (a = b - 3)</i> в JavaScript?",
      "explanation": "Можно, однако делать так не рекомендуется из-за низкой читабельности кода",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "50",
      "question" : "Что такое присваивание по цепочке в JavaScript?",
      "explanation": "<img src='assets/img/questions/juniorJsQuestions/50.jpg'>",
      "link": ""
    },
    {
      "number" : "51",
      "question" : "Как присвоить значение сразу нескольким переменным в JavaScript?",
      "explanation": "Использовать присваивание по цепочке. <img src='assets/img/questions/juniorJsQuestions/51.jpg'>",
      "link": ""
    },
    {
      "number" : "52",
      "question" : "Что такое инкремент и декремент в JavaScript?",
      "explanation": "Инкремент (++) увеличивает значение на единицу (a++ аналогично записи a = a + 1 или a += 1), декремент (--) уменьшает на 1 (a-- аналогично записи a = a - 1 или a -= 1). Инкремент и декремент может быть применен тольк к переменным. Попытка применить их к числам вызовет ошибку.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "53",
      "question" : "В чем разница между постфиксной и префиксной формой инкремента и декремента в JavaScript?",
      "explanation": "Операторы ++ и -- могут располагаться как до, так и после переменной. Разницу можно заметить только если возвращать результат. <img src='assets/img/questions/juniorJsQuestions/53.jpg'> и <img src='assets/img/questions/juniorJsQuestions/53_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "54",
      "question" : "Зачем используется оператор запятая (<i>,</i>) в JavaScript?",
      "explanation": "Запятая предоставляет возможность вычислять несколько выражений, разделяя их. Выполняется каждое выражение, но возвращается результат только последнего. Данный оператор в основном используется внутри цикла for, что позволяет при каждом прохождении цикла одновременно обновлять значения нескольких переменных. <img src='assets/img/questions/juniorJsQuestions/54.jpg'> Например, если a является двумерным массивом, каждая строка которого содержит 10 элементов, то следующий код с использованием оператора запятая позволяет выполнять одновременное приращение двух переменных. Данный код выводит на экран значения диагональных элементов массива: <img src='assets/img/questions/juniorJsQuestions/54_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "55",
      "question" : "Какие операторы сравнения представлены в JavaScript?",
      "explanation": "В JavaScript представлены следующие операторы сравнения: больше (a > b), меньше (a < b), больше или равно (a >= b), меньше или равно (a <= b), равно (a == b), не равно (a != b), строгое равно (a === b), строгое не равно (a !== b).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "56",
      "question" : "Что возвращают выражения с каким либо оператором сравнения в JavaScript?",
      "explanation": "Выражения с операторами сравнения возвращают логический тип данных (true или false). Результат можно присвоить в переменную. <img src='assets/img/questions/juniorJsQuestions/56.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators"
    },
    {
      "number" : "57",
      "question" : "Объяснить правила сравнения строк в JavaScript",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false). <img src='assets/img/questions/juniorJsQuestions/57.jpg'><img src='assets/img/questions/juniorJsQuestions/57_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators#операторы_сравнения"
    },
    {
      "number" : "58",
      "question" : "Как происходит сравнение разных типов данных в JavaScript?",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness"
    },
    {
      "number" : "59",
      "question" : "Оператор строгого равенства и зачем он используется в JavaScrypt?",
      "explanation": "Для строгого сравнения в JavaScrypt используется оператор ===. Он сравнивает операнды без приведения типов.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness"
    },
    {
      "number" : "60",
      "question" : "Какой результат выражения <i>null == undefined;</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат true, поскольку операнды null и undefined при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness"
    },
    {
      "number" : "61",
      "question" : "Какой результат выражения <i>null === undefined;</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат false, поскольку оператор === сравнивает без приведения типов, то есть, буквально.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness"
    },
    {
      "number" : "62",
      "question" : "Как происхорди процесс работы оператора <i>||</i> (или) в JavaScrypt?",
      "explanation": "Операнды вычисляются слева направо. Происходит преобразование каждого операнда в логический тип. При первом же значении true работа оператора останавливается и возвращается исходное значение этого операнда. В случае, когда все операнды false, возвращается значение последнего из них",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "63",
      "question" : "Какой результат выражения <i>true || true</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "64",
      "question" : "Какой результат выражения <i>false || true</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "65",
      "question" : "Какой результат выражения <i>true || false</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "66",
      "question" : "Какой результат выражения <i>false || false</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат false, так как оба false, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу, но в случае, если значение true не встречается вообще, возвращает последний false.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "67",
      "question" : "Какой результат выражения <i>13 > 24 || 7 < 8</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат true, так как оба сравнения преобразуются в булево значение и результатом второго будет true, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "68",
      "question" : "Какой результат выражения <i>13 > 24 || 7 < 6</i> будет правильным в JavaScrypt и почему?",
      "explanation": "Результат false, так как оба сравнения преобразуются в булево значение и результатом их всех будет false, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу, но в случае, когда все сравнения false, возвращает последний из них.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "69",
      "question" : "Какое значение будет присвоено переменной user в JavaScrypt и почему?<img src='assets/img/questions/juniorJsQuestions/69.jpg'>",
      "explanation": "Переменной userName будет присвоено значение 'Джаред', потому что оператор || возвращает исходное значение первого встреченного операнда со значением true. ",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR"
    },
    {
      "number" : "70",
      "question" : "Как происхорди процесс работы оператора <i>&&</i> (и) в JavaScrypt?",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND"
    },
    {
      "number" : "71",
      "question" : "Какой оператор имеет бОльший приоритет: <i>||</i> (логическое или) или <i>&&</i> (логическое и) в JavaScrypt?",
      "explanation": "Оператор && (логическое и) имеет приоритет выше, чем оператор || (логическое или), а значит выполняется раньше.",
      "link": ""
    },
    {
      "number" : "72",
      "question" : "Оператор <i>!</i> (логическое не) в JavaScrypt. Какие действия выполняет?",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT"
    },
    {
      "number" : "73",
      "question" : "Расположить логические операторы <i>||</i> (логическое или), <i>!</i> (логическое не), <i>&&</i> (логические и) по убыванию приоритета (от большего к меньшему) в JavaScrypt.",
      "explanation": "Наивысший приоритет имеет ! (логическое не), затем идет && (логические и), а на последнем месте || (логическое или)",
      "link": ""
    },
    {
      "number" : "74",
      "question" : "Чем можно заменить специальную функцию <i>Boolean()</i> в JavaScrypt?",
      "explanation": "Аналог функции Boolean() два !! (логические операторы не)",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT"
    },
    {
      "number" : "75",
      "question" : "Для чего используются два подряд опертора <i>!!</i> (логические не) в JavaScrypt?",
      "explanation": "Аналог функции Boolean() два !! (логические операторы не). Они преобразовывают операнд в булев тип",
      "link": ""
    },
    {
      "number" : "76",
      "question" : "Что возвращает оператор сравнения с <i>null</i>, каким символом обозначается в JavaScrypt?",
      "explanation": "Оператор сравнения с null (нулевого слияния) записывается, как ?? и возвращает первый аргумент, если он не null и не undefined, иначе второй.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing"
    },
    {
      "number" : "77",
      "question" : "В каких случаях произвольный код выполнится в JavaScrypt? <img src='assets/img/questions/juniorJsQuestions/77.jpg'>",
      "explanation": "Произвольный код выполнится, если в скобках будет true, так как все, что туда помещено, преобразовывается в булев тип",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else"
    },
    {
      "number" : "78",
      "question" : "Как сократить в JavaScrypt запись <img src='assets/img/questions/juniorJsQuestions/78.jpg'>",
      "explanation": "<i>if (2 > 1) console.log('message');</i> Так сократить пример можно, если выполняемая инструкция записана в одну строку",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else"
    },
    {
      "number" : "79",
      "question" : "Как сократить в JavaScrypt запись <img src='assets/img/questions/juniorJsQuestions/79.jpg'>",
      "explanation": "<i>2 > 1 ? console.log('Вася') : console.log('Оля');</i> Так сократить пример можно при помощи тренарного оператора ?",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Conditional_operator"
    },
    {
      "number" : "80",
      "question" : "Тернарный оператор в JavaScrypt. Как он записывается и как используется?",
      "explanation": "Условный (тернарный) оператор - единственный оператор в JavaScript, принимающий три операнда: условие, за которым следует знак вопроса (?), затем выражение, которое выполняется, если условие истинно, сопровождается двоеточием (:), и, наконец, выражение, которое выполняется, если условие ложно. Он часто используется в качестве сокращённого варианта инструкции if...else.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Conditional_operator"
    },
    {
      "number" : "81",
      "question" : "Как записать следующее выражение при помощи тернарного оператора '?' в JavaScrypt?<img src='assets/img/questions/juniorJsQuestions/81.jpg'>",
      "explanation": "<img src='assets/img/questions/juniorJsQuestions/81_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Conditional_operator"
    },
    {
      "number" : "82",
      "question" : "Синтаксис цикла <i>while</i> в JavaScrypt. Как парвильно записать?",
      "explanation": "<img src='assets/img/questions/juniorJsQuestions/82.jpg'><img src='assets/img/questions/juniorJsQuestions/82_1.jpg'>",
      "link": ""
    },
    {
      "number" : "83",
      "question" : "При каком условии будет выполняться тело любого цикла в JavaScrypt?",
      "explanation": "Если условие вернет true. При этом не обязательно наличие самого условия, достаточно, чтобы в скобки было помещено что то, что автоматически даст true.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration#цикл_do...while"
    },
    {
      "number" : "84",
      "question" : "Как правильно записывается конструкция <i>do...while</i> в JavaScrypt? В чем его отличие от цикла <i>while</i>?",
      "explanation": "Конструкция do...while используется тогда, когда нам необходимо выполнение тела цикла хотя бы 1 раз, независимо от того, вернет условия true или нет. <img src='assets/img/questions/juniorJsQuestions/84.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration#цикл_do...while"
    },
    {
      "number" : "85",
      "question" : "Как сократить запись данного примера в JavaScrypt? Какое первое и последнее значения будут выведены в консоль? <img src='assets/img/questions/juniorJsQuestions/85.jpg'>",
      "explanation": "В консоль выведутся числа от 1 до 5 включительно <img src='assets/img/questions/juniorJsQuestions/85_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "number" : "86",
      "question" : "Как сократить запись данного примера в JavaScrypt? Какое первое и последнее значения будут выведены в консоль? <img src='assets/img/questions/juniorJsQuestions/86.jpg'>",
      "explanation": "В консоль выведутся числа от 0 до 4 включительно <img src='assets/img/questions/juniorJsQuestions/86_1.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "number" : "87",
      "question" : "Какой синтаксис цикла <i>for</i> в JavaScrypt?",
      "explanation": "<img src='assets/img/questions/juniorJsQuestions/87.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "number" : "88",
      "question" : "Какое первое и последнее значение переменной num будут выведены в консоль при выполненнии данного кода JavaScrypt? <img src='assets/img/questions/juniorJsQuestions/88.jpg'>",
      "explanation": "От 0 до 4 включительно",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "number" : "89",
      "question" : "Какое первое и последнее значение переменной num будут выведены в консоль при выполненнии данного кода JavaScrypt? <img src='assets/img/questions/juniorJsQuestions/89.jpg'>",
      "explanation": "От 0 до 4 включительно",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration"
    },
    {
      "number" : "90",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "91",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "92",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "93",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "94",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "95",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "96",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "97",
      "question" : "",
      "explanation": "",
      "link": ""
    },
    {
      "number" : "",
      "question" : "",
      "explanation": "",
      "link": ""
    }
    
  ]
}