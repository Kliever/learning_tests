{
  "Test": [
    {
      "number": "1",
      "question": "Какое ключевое слово используется для объявления переменных, видимых только внутри блока, в котором они объявлены?",
      "explanation": "Директива <i>let</i> объявляет переменную с блочной областью видимости с возможностью инициализировать её значением.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
      "answers": [
        {
          "answer": "var",
          "status": "false"
        },
        {
          "answer": "let",
          "status": "true"
        },
        {
          "answer": "const",
          "status": "false"
        },
        {
          "answer": "block",
          "status": "false"
        }
      ]
    },
    {
      "number": "2",
      "question": "Какую область видимости имеет переменная, объявленная с помощью <i>let</i>?",
      "explanation": "Директива <i>let</i> объявляет переменную с блочной областью видимости с возможностью инициализировать её значением.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
      "answers": [
        {
          "answer": "Глобальная",
          "status": "false"
        },
        {
          "answer": "Блочная",
          "status": "true"
        },
        {
          "answer": "Локальная",
          "status": "false"
        },
        {
          "answer": "Она не имеет области видимости",
          "status": "false"
        }
      ]
    },
    {
      "number": "3",
      "question": "Что произойдет, если попытаться переопределить переменную, объявленную с помощью <i>const</i>?",
      "explanation": "Значение констант не может быть изменено новым присваиванием, а также не может быть переопределено. Константы (<i>const</i>) подчиняются области видимости уровня блока так же, как переменные, объявленные с использованием ключевого слова <i>let</i>.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const",
      "answers": [
        {
          "answer": "Переопределение пройдет успешно",
          "status": "false"
        },
        {
          "answer": "Будет выдана ошибка компиляции",
          "status": "true"
        },
        {
          "answer": "Переменная станет undefined",
          "status": "false"
        },
        {
          "answer": "Значение переменной останется неизменной",
          "status": "false"
        }
      ]
    },
    {
      "number": "4",
      "question": "Какая из следующих переменных может быть объявлена с помощью <i>const</i>?",
      "explanation": "Значение констант не может быть изменено новым присваиванием, а также не может быть переопределено. Константы (<i>const</i>) подчиняются области видимости уровня блока так же, как переменные, объявленные с использованием ключевого слова <i>let</i>.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const",
      "answers": [
        {
          "answer": "Любая переменная",
          "status": "false"
        },
        {
          "answer": "Только числовая переменная",
          "status": "false"
        },
        {
          "answer": "Только строковая переменная",
          "status": "false"
        },
        {
          "answer": "Только переменная, которая не будет изменяться после объявления",
          "status": "true"
        }
      ]
    },
    {
      "number": "5",
      "question": "Какая из следующих переменных не может быть переопределена после объявления?",
      "explanation": "Значение констант не может быть изменено новым присваиванием, а также не может быть переопределено. Константы (<i>const</i>) подчиняются области видимости уровня блока так же, как переменные, объявленные с использованием ключевого слова <i>let</i>.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const",
      "answers": [
        {
          "answer": "let name = 'John'",
          "status": "false"
        },
        {
          "answer": "const age = 30",
          "status": "true"
        },
        {
          "answer": "let count = 5",
          "status": "false"
        },
        {
          "answer": "const PI = 3.14159",
          "status": "false"
        }
      ]
    },
    {
      "number": "6",
      "question": "Какой метод массива используется для удаления элементов по индексу?",
      "explanation": "Метод <i>splice()</i> изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
      "answers": [
        {
          "answer": "delete()",
          "status": "false"
        },
        {
          "answer": "splice()",
          "status": "true"
        },
        {
          "answer": "remove()",
          "status": "false"
        },
        {
          "answer": "cut()",
          "status": "false"
        }
      ]
    },
    {
      "number": "7",
      "question": "Какой оператор используется для инкремента значения переменной на 1?",
      "explanation": "Инкремент (<i>++</i>) - Унарный оператор. Добавляет единицу к своему операнду. Если используется в качестве префикса (<i>++x</i>), то возвращает значение операнда с добавленной к нему единицей; а в случае применения в качестве окончания (<i>x++</i>) возвращает значение операнда перед добавлением к нему единицы.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators#арифметические_операторы",
      "answers": [
        {
          "answer": "++",
          "status": "true"
        },
        {
          "answer": "+=",
          "status": "false"
        },
        {
          "answer": "--",
          "status": "false"
        },
        {
          "answer": "+1",
          "status": "false"
        }
      ]
    },
    {
      "number": "8",
      "question": "Какой метод массива используется для сортировки элементов?",
      "explanation": "Метод <i>sort()</i> на месте сортирует элементы массива и возвращает отсортированный массив. Сортировка не обязательно устойчива. Порядок сортировки по умолчанию соответствует порядку кодовых точек Unicode.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
      "answers": [
        {
          "answer": "sort()",
          "status": "true"
        },
        {
          "answer": "order()",
          "status": "false"
        },
        {
          "answer": "arrange()",
          "status": "false"
        },
        {
          "answer": "group()",
          "status": "false"
        }
      ]
    },
    {
      "number": "9",
      "question": "Какой метод строки используется для преобразования всех символов в верхний регистр?",
      "explanation": "Метод <i>toUpperCase()</i> возвращает значение строки, на которой он был вызван, преобразованное в верхний регистр.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
      "answers": [
        {
          "answer": "toUpperCase()",
          "status": "true"
        },
        {
          "answer": "toLower()",
          "status": "false"
        },
        {
          "answer": "convertToUpperCase()",
          "status": "false"
        },
        {
          "answer": "upperCase()",
          "status": "false"
        }
      ]
    },
    {
      "number": "10",
      "question": "Какой метод используется для округления числа до ближайшего целого значения?",
      "explanation": "Метод <i>Math.round()</i> возвращает число, округлённое к ближайшему целому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/round",
      "answers": [
        {
          "answer": "round()",
          "status": "true"
        },
        {
          "answer": "ceil()",
          "status": "false"
        },
        {
          "answer": "floor()",
          "status": "false"
        },
        {
          "answer": "truncate()",
          "status": "false"
        }
      ]
    },
    {
      "number": "11",
      "question": "Что означает ключевое слово <i>this</i> в контексте объекта?",
      "explanation": "Поведение ключевого слова <i>this</i> в JavaScript несколько отличается по сравнению с остальными языками. Имеются также различия при использовании <i>this</i> в строгом и нестрогом режиме.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/this",
      "answers": [
        {
          "answer": "Текущий объект, на котором используется this",
          "status": "true"
        },
        {
          "answer": "Ссылку на родительский элемент",
          "status": "false"
        },
        {
          "answer": "Текущий элемент массива",
          "status": "false"
        },
        {
          "answer": "Глобальный объект window",
          "status": "false"
        }
      ]
    },
    {
      "number": "12",
      "question": "Какой метод используется для преобразования строки в число с плавающей точкой?",
      "explanation": "Функция <i>parseFloat()</i> принимает строку в качестве аргумента и возвращает десятичное число (число с плавающей точкой)",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
      "answers": [
        {
          "answer": "parseFloat()",
          "status": "true"
        },
        {
          "answer": "toInt()",
          "status": "false"
        },
        {
          "answer": "parseNumber()",
          "status": "false"
        },
        {
          "answer": "toDouble()",
          "status": "false"
        }
      ]
    },
    {
      "number": "13",
      "question": "Какой метод строки используется для поиска подстроки в строке?",
      "explanation": "Метод <i>indexOf()</i> возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
      "answers": [
        {
          "answer": "indexOf()",
          "status": "true"
        },
        {
          "answer": "substring()",
          "status": "false"
        },
        {
          "answer": "find()",
          "status": "false"
        },
        {
          "answer": "search()",
          "status": "false"
        }
      ]
    },
    {
      "number": "14",
      "question": "Какой объект позволяет выполнять операции с датами и временем?",
      "explanation": "Создаёт экземпляр объекта <i>Date</i>, представляющего собой момент времени. Объект Дата содержит число миллисекунд прошедших с 1 января 1970 г. UTC",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Date",
      "answers": [
        {
          "answer": "Date",
          "status": "true"
        },
        {
          "answer": "Time",
          "status": "false"
        },
        {
          "answer": "Clock",
          "status": "false"
        },
        {
          "answer": "Timer",
          "status": "false"
        }
      ]
    },
    {
      "number": "15",
      "question": "Что вернет метод <i>indexOf()</i> если элемент не найден в массиве?",
      "explanation": "Метод <i>indexOf()</i> возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
      "answers": [
        {
          "answer": "-1",
          "status": "true"
        },
        {
          "answer": "0",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        }
      ]
    },
    {
      "number": "16",
      "question": "Какой результат вычисления выражения <i>Math.max(2, 7, 5, 10)</i> в JavaScript?",
      "explanation": "Метод <i>Math.max()</i> возвращает наибольшее из нуля или более чисел.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/max",
      "answers": [
        {
          "answer": "10",
          "status": "true"
        },
        {
          "answer": "7",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        },
        {
          "answer": "5",
          "status": "false"
        }
      ]
    },
    {
      "number": "17",
      "question": "Что делает оператор <i>typeof</i> в JavaScript?",
      "explanation": "Оператор <i>typeof</i> возвращает строку, указывающую тип операнда.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/typeof",
      "answers": [
        {
          "answer": "Определяет тип данных",
          "status": "true"
        },
        {
          "answer": "Проверяет наличие переменной",
          "status": "false"
        },
        {
          "answer": "Изменяет значение переменной",
          "status": "false"
        },
        {
          "answer": "Удаляет переменную",
          "status": "false"
        }
      ]
    },
    {
      "number": "18",
      "question": "Каким образом объявляется функция в JavaScript?",
      "explanation": "Объявление функции определяет функцию с указанными аргументами. Также вы можете определять функции через конструктор <i>Function</i> или функциональное выражение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/function",
      "answers": [
        {
          "answer": "func myFunction() {}",
          "status": "false"
        },
        {
          "answer": "function myFunction() {}",
          "status": "true"
        },
        {
          "answer": "myFunction = function() {}",
          "status": "false"
        },
        {
          "answer": "function = myFunction() {}",
          "status": "false"
        }
      ]
    },
    {
      "number": "19",
      "question": "Какой метод используется для добавления нового элемента в конец массива?",
      "explanation": "Метод <i>push()</i> добавляет один или более элементов в конец массива и возвращает новую длину массива.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
      "answers": [
        {
          "answer": "push()",
          "status": "true"
        },
        {
          "answer": "pop()",
          "status": "false"
        },
        {
          "answer": "shift()",
          "status": "false"
        },
        {
          "answer": "unshift()",
          "status": "false"
        }
      ]
    },
    {
      "number": "20",
      "question": "Какой оператор используется для строгого сравнения по значению и типу?",
      "explanation": "Строго равно (<i>===</i>) - Возвращает <i>true</i>, если операнды равны и имеют одинаковый тип",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "===",
          "status": "true"
        },
        {
          "answer": "==",
          "status": "false"
        },
        {
          "answer": "!==",
          "status": "false"
        },
        {
          "answer": "!=",
          "status": "false"
        }
      ]
    },
    {
      "number": "21",
      "question": "Какой метод используется для объявления переменной?",
      "explanation": "Директива <i>let</i> объявляет переменную с блочной областью видимости с возможностью инициализировать её значением.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
      "answers": [
        {
          "answer": "let variableName",
          "status": "true"
        },
        {
          "answer": "const variableName",
          "status": "false"
        },
        {
          "answer": "var variableName",
          "status": "false"
        },
        {
          "answer": "new variableName",
          "status": "false"
        }
      ]
    },
    {
      "number": "22",
      "question": "Какие ключевые слова используются в JavaScript для того, чтобы объявить переменную?",
      "explanation": "",
      "link": "https://developer.mozilla.org/ru/docs/Learn/JavaScript/First_steps/Variables",
      "answers": [
        {
          "answer": "var, let, const",
          "status": "true"
        },
        {
          "answer": "byte, short, int, float",
          "status": "false"
        },
        {
          "answer": "int, short, var",
          "status": "false"
        },
        {
          "answer": "const, let, int",
          "status": "false"
        }
      ]
    },
    {
      "number": "23",
      "question": "Функция это —",
      "explanation": "В JavaScript функции являются объектами первого класса, то есть: они являются объектами и с ними можно взаимодействовать и передавать их точно так же как любой другой объект",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions",
      "answers": [
        {
          "answer": "Объект",
          "status": "true"
        },
        {
          "answer": "Отдельный тип данных 'function'",
          "status": "false"
        },
        {
          "answer": "Один из примитивных типов данных",
          "status": "false"
        },
        {
          "answer": "Один из способов объявления переменной",
          "status": "false"
        }
      ]
    },
    {
      "number": "24",
      "question": "Какие типы данных в JS являются примитивами?",
      "explanation": "Примитив (значение примитивного типа, примитивный тип данных) это данные, которые не являются объектом и не имеют методов. В JavaScript 7 простых типов данных: <i>string</i>, <i>number</i>, <i>boolean</i>, <i>null</i>, <i>undefined</i>, <i>symbol</i> (новое в ECMAScript 2015), <i>bigint</i>.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures",
      "answers": [
        {
          "answer": "String, Boolean, Number",
          "status": "false"
        },
        {
          "answer": "String, Boolean, Number, Undefined, Null, Symbol, BigInt",
          "status": "true"
        },
        {
          "answer": "Object, Array, Map, Set, Data",
          "status": "false"
        },
        {
          "answer": "String, Boolean, Number, Undefined, NaN, Symbol, BigInt",
          "status": "false"
        }
      ]
    },
    {
      "number": "25",
      "question": "Какого типа данных нет в JS?",
      "explanation": "JavaScript является слабо типизированным или динамическим языком. Это значит, что вам не нужно определять тип переменной заранее. Тип определится автоматически во время выполнения программы. Также это значит, что вы можете использовать одну переменную для хранения данных различных типов",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures",
      "answers": [
        {
          "answer": "NaN",
          "status": "true"
        },
        {
          "answer": "Undefined",
          "status": "false"
        },
        {
          "answer": "Boolean",
          "status": "false"
        },
        {
          "answer": "Null",
          "status": "false"
        },
        {
          "answer": "String",
          "status": "false"
        }
      ]
    },
    {
      "number": "26",
      "question": "Как объявить пустой массив в JavaScript?",
      "explanation": "Массивы создаются из квадратных скобок , которые содержат список элементов, разделённых запятыми.",
      "link": "https://developer.mozilla.org/ru/docs/Learn/JavaScript/First_steps/Arrays",
      "answers": [
        {
          "answer": "let arrey = []",
          "status": "true"
        },
        {
          "answer": "let arrey = {}",
          "status": "false"
        },
        {
          "answer": "empryArrey = []",
          "status": "false"
        },
        {
          "answer": "let arrey = new Arrey()",
          "status": "false"
        }
      ]
    },
    {
      "number": "27",
      "question": "Как конвертировать итерируемый объект в массив?",
      "explanation": "Метод <i>Array.from()</i> создаёт новый экземпляр Array из массивоподобного или итерируемого объекта.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/from",
      "answers": [
        {
          "answer": "Arrey.from()",
          "status": "true"
        },
        {
          "answer": "Arrey.fromObject()",
          "status": "false"
        },
        {
          "answer": "Arrey.object()",
          "status": "false"
        },
        {
          "answer": "Arrey.convertFrom()",
          "status": "false"
        }
      ]
    },
    {
      "number": "28",
      "question": "Как разбить строку на массив по заданному разделителю?",
      "explanation": "Метод <i>split()</i> разбивает объект <i>String</i> на массив строк путём разделения строки указанной подстрокой.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/split",
      "answers": [
        {
          "answer": "split()",
          "status": "true"
        },
        {
          "answer": "join()",
          "status": "false"
        },
        {
          "answer": "toArrey()",
          "status": "false"
        },
        {
          "answer": "reverse",
          "status": "false"
        }
      ]
    },
    {
      "number": "29",
      "question": "Метод <i>JSON.stringify()</i> преобразует...",
      "explanation": "Метод <i>JSON.stringify()</i> возвращает JavaScript-значение, преобразованное в JSON-строку. Возможна замена значений, если как <i>replacer</i> передана функция, или включение только определённых свойств, если как <i>replacer</i> указан массив.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
      "answers": [
        {
          "answer": "Значение JavaScript в строку JSON",
          "status": "true"
        },
        {
          "answer": "Строку JSON в другую JSON",
          "status": "false"
        },
        {
          "answer": "Строку JSON в значение JavaScript",
          "status": "false"
        }
      ]
    },
    {
      "number": "30",
      "question": "Стрелочные функции не имеют...",
      "explanation": "Выражения стрелочных функций имеют более короткий синтаксис по сравнению с функциональными выражениями и лексически привязаны к значению <i>this</i> (но не привязаны к собственному <i>this</i>, <i>arguments</i>, <i>super</i>, или <i>new.target</i>). Выражение стрелочных функций не позволяют задавать имя, поэтому стрелочные функции анонимны, если их ни к чему не присвоить.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
      "answers": [
        {
          "answer": "Собственного this и arguments",
          "status": "true"
        },
        {
          "answer": "Собственного this",
          "status": "false"
        },
        {
          "answer": "Собственного объекта arguments",
          "status": "false"
        }
      ]
    },
    {
      "number": "31",
      "question": "Какие циклы есть в языке JavaScript?",
      "explanation": "Операторы предназначенные для организации циклов в JavaScript: <i>for</i>, <i>do...while</i>, <i>while</i>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "answers": [
        {
          "answer": "for, while, do while",
          "status": "true"
        },
        {
          "answer": "for, while, do while, forEach",
          "status": "false"
        },
        {
          "answer": "for, forMap, forEach, while, do while",
          "status": "false"
        },
        {
          "answer": "for, forMap, forEach, while",
          "status": "false"
        }
      ]
    },
    {
      "number": "32",
      "question": "Какой метод преобразует значение JavaScript в строку <i>JSON</i>?",
      "explanation": "Метод <i>JSON.stringify()</i> возвращает JavaScript-значение, преобразованное в JSON-строку.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
      "answers": [
        {
          "answer": "JSON.stringify()",
          "status": "true"
        },
        {
          "answer": "JSON.parse()",
          "status": "false"
        },
        {
          "answer": "JSON.string()",
          "status": "false"
        },
        {
          "answer": "JSON.toString()",
          "status": "false"
        }
      ]
    },
    {
      "number": "33",
      "question": "Выберите метод JavaScript позволяющий выполнять произвольный код через заданные промежутки времени:",
      "explanation": "Метод <i>setInterval()</i> предложен для Window и Worker интерфейсов. Он циклически вызывает функцию или участок кода с фиксированной паузой между каждым вызовом. Уникальный идентификатор intervalID, возвращаемый методом, позволяет впоследствии удалить запущенный <i>setInterval()</i> c помощью <i>clearInterval()</i>",
      "link": "https://developer.mozilla.org/ru/docs/Web/API/setInterval",
      "answers": [
        {
          "answer": "setInterval()",
          "status": "true"
        },
        {
          "answer": "setTimeout()",
          "status": "false"
        },
        {
          "answer": "setTimer()",
          "status": "false"
        },
        {
          "answer": "callCode()",
          "status": "false"
        }
      ]
    },
    {
      "number": "34",
      "question": "Какая функция добавляет один или больше элементов в конец массива и возвращает новую длину этого же массива?",
      "explanation": "Метод <i>push()</i> добавляет один или более элементов в конец массива и возвращает новую длину массива.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
      "answers": [
        {
          "answer": "push()",
          "status": "true"
        },
        {
          "answer": "pop()",
          "status": "false"
        },
        {
          "answer": "map()",
          "status": "false"
        },
        {
          "answer": "join()",
          "status": "false"
        }
      ]
    },
    {
      "number": "35",
      "question": "Сколько параметров можно передать функции?",
      "explanation": "",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Functions",
      "answers": [
        {
          "answer": "Любое количество",
          "status": "true"
        },
        {
          "answer": "Ровно столько, сколько указано в определении функции",
          "status": "false"
        },
        {
          "answer": "Сколько указано в определении функции или меньше",
          "status": "false"
        },
        {
          "answer": "Сколько указано в определении функции или больше",
          "status": "false"
        }
      ]
    },
    {
      "number": "36",
      "question": "Что такое замыкание (<i>closure</i>) в JavaScript?",
      "explanation": "Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена. Другими словами, замыкание даёт вам доступ к внешней функции из внутренней функции. В JavaScript замыкания создаются каждый раз при создании функции, во время её создания.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures",
      "answers": [
        {
          "answer": "Это функция, которая имеет доступ к переменным из мнешней функции",
          "status": "true"
        },
        {
          "answer": "Это специальный тип данных",
          "status": "false"
        },
        {
          "answer": "Это объект",
          "status": "false"
        },
        {
          "answer": "Это элемент массива",
          "status": "false"
        }
      ]
    },
    {
      "number": "37",
      "question": "Какая из следующих конструкций создает объект в JavaScript?",
      "explanation": "",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "{1: 'one', 2: 'two'}",
          "status": "true"
        },
        {
          "answer": "[1, 2, 3]",
          "status": "false"
        },
        {
          "answer": "'Hello, World!'",
          "status": "false"
        },
        {
          "answer": "42",
          "status": "false"
        }
      ]
    },
    {
      "number": "38",
      "question": "Какие конструкции для циклов есть в JavaScript?",
      "explanation": "Циклы - простой способ сделать какое-то действие несколько раз. Существуют три конструкции для создания циклов: <i>for</i>, <i>while</i>, <i>do...while</i>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "answers": [
        {
          "answer": "Три: for, while, do...while",
          "status": "true"
        },
        {
          "answer": "Только две: for, while",
          "status": "false"
        },
        {
          "answer": "Только одна: for",
          "status": "false"
        }
      ]
    },
    {
      "number": "39",
      "question": "Какая арифметическая операция приводит к ошибке в JavaScript?",
      "explanation": "К ошибке приведут операции инкремента/декремента (увеличение или уменьшение на единицу), если попытаться вызвать их не на переменной",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "++1",
          "status": "true"
        },
        {
          "answer": "Деление на ноль",
          "status": "false"
        },
        {
          "answer": "Умножение числа на строку",
          "status": "false"
        },
        {
          "answer": "Корень из отрицательного числа",
          "status": "false"
        },
        {
          "answer": "++counter",
          "status": "false"
        }
      ]
    },
    {
      "number": "40",
      "question": "Что делает оператор <i>===</i>?",
      "explanation": "Возвращает true, если операнды равны и имеют одинаковый тип.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "Сравнивает без приведения типов",
          "status": "true"
        },
        {
          "answer": "Проверяет правильность введенных данных",
          "status": "false"
        },
        {
          "answer": "Сравнивает с приведением типов",
          "status": "false"
        },
        {
          "answer": "Нет такого оператора",
          "status": "false"
        }
      ]
    },
    {
      "number": "41",
      "question": "Что относится к функциональной области видимости?",
      "explanation": "Функциональная область видимости — это область видимости в пределах тела функции. Можно сказать, что она ограничена {  } функции. К переменной b есть доступ только внутри функции scoped. Функциональная область видимости — очень мощный инструмент для разделения кода.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
      "answers": [
        {
          "answer": "Область видимости в пределах одной функции",
          "status": "true"
        },
        {
          "answer": "Область видимости для всех функций в проекте",
          "status": "false"
        },
        {
          "answer": "Область видимости вне объявленных функций",
          "status": "false"
        }
      ]
    },
    {
      "number": "42",
      "question": "Каково будет значение переменной <i>i</i> после выполнения следующего JavaScript кода? <img src='assets/img/questions/juniorJsQuiz/42.jpg'>",
      "explanation": "Выражение <i>do...while</i> создаёт цикл, который выполняет указанное выражение до тех пор, пока условие не станет ложным. Условие проверяется после выполнения выражения, то есть выражение выполнится как минимум один раз.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/do...while",
      "answers": [
        {
          "answer": "6",
          "status": "true"
        },
        {
          "answer": "0",
          "status": "false"
        },
        {
          "answer": "1",
          "status": "false"
        }
      ]
    },
    {
      "number": "43",
      "question": "Каково будет значение переменной <i>j</i> после выполнения следующего JavaScript кода? <img src='assets/img/questions/juniorJsQuiz/43.jpg'>",
      "explanation": "Оператор <i>for</i> создаёт цикл, состоящий из трех необязательных выражений, заключенных в круглые скобки и разделенных точкой с запятой, за которыми следует инструкция (часто блок инструкций), которая должна выполняться в цикле.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for",
      "answers": [
        {
          "answer": "1",
          "status": "true"
        },
        {
          "answer": "2",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "44",
      "question": "Какое значение будет выведено в консоль результате выполнения скрипта? <img src='assets/img/questions/juniorJsQuiz/44.jpg'>",
      "explanation": "Блок <i>{ j += 1; }</i> не относится к циклу <i>for</i>, так как отделен от него точкой с запятой",
      "link": "",
      "answers": [
        {
          "answer": "1",
          "status": "true"
        },
        {
          "answer": "0",
          "status": "false"
        },
        {
          "answer": "9",
          "status": "false"
        },
        {
          "answer": "10",
          "status": "false"
        }
      ]
    },
    {
      "number": "45",
      "question": "Каково будет значение переменной <i>i</i> после выполнения указанного JavaScript кода?<img src='assets/img/questions/juniorJsQuiz/45.jpg'>",
      "explanation": "",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/do...while",
      "answers": [
        {
          "answer": "15",
          "status": "true"
        },
        {
          "answer": "10",
          "status": "false"
        },
        {
          "answer": "5",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "46",
      "question": "Какое из следующих утверждений верное относительно области видимости переменных, объявленных с использованием <i>const<i>?",
      "explanation": "Значение констант не может быть изменено новым присваиванием, а также не может быть переопределено. Константы (<i>const</i>) подчиняются области видимости уровня блока так же, как переменные, объявленные с использованием ключевого слова <i>let</i>.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const",
      "answers": [
        {
          "answer": "Перменные const имеют блочную область видимости, ограниченную телом юлижайшей функции или блока кода",
          "status": "true"
        },
        {
          "answer": "Переменные const имеют глобальную область видимости",
          "status": "false"
        },
        {
          "answer": "Переменные const имеют функциональную область видимости, ограниченную телом ближайшей функции",
          "status": "false"
        },
        {
          "answer": "Переменные const имеют область видимости, ограниченную телом скрипта",
          "status": "false"
        }
      ]
    },
    {
      "number": "47",
      "question": "Что вернет число 0, приведенное к типу <i>Boolean</i> в JavaScript?",
      "explanation": "Логическое преобразование самое простое. Происходит в логических операциях (позже мы познакомимся с условными проверками и подобными конструкциями), но также может быть выполнено явно с помощью функции <i>Boolean(value)</i>. Правило преобразования: Значения, которые интуитивно «пустые», вроде <i>0</i>, <i>пустой строки</i>, <i>null</i>, <i>undefined</i> и <i>NaN</i>, становятся false. Все остальные значения становятся <i>true</i>.",
      "link": "",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "48",
      "question": "Что вернет строка <i>'0'</i>, приведенная к типу <i>Boolean</i> в JavaScript?",
      "explanation": "Логическое преобразование самое простое. Происходит в логических операциях (позже мы познакомимся с условными проверками и подобными конструкциями), но также может быть выполнено явно с помощью функции <i>Boolean(value)</i>. Правило преобразования: Значения, которые интуитивно «пустые», вроде <i>0</i>, <i>пустой строки</i>, <i>null</i>, <i>undefined</i> и <i>NaN</i>, становятся <i>false</i>. Все остальные значения становятся <i>true</i>.",
      "link": "",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "49",
      "question": "Что вернет пустая строка <i>''</i>, приведенная к типу <i>Boolean</i> в JavaScript?",
      "explanation": "Логическое преобразование самое простое. Происходит в логических операциях (позже мы познакомимся с условными проверками и подобными конструкциями), но также может быть выполнено явно с помощью функции <i>Boolean(value)</i>. Правило преобразования: Значения, которые интуитивно «пустые», вроде <i>0</i>, <i>пустой строки</i>, <i>null</i>, <i>undefined</i> и <i>NaN</i>, становятся <i>false</i>. Все остальные значения становятся <i>true</i>.",
      "link": "",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "50",
      "question": "Что вернет строка с пробелом <i>' '</i>, приведенная к типу <i>Boolean</i>в JavaScript?",
      "explanation": "Логическое преобразование самое простое. Происходит в логических операциях (позже мы познакомимся с условными проверками и подобными конструкциями), но также может быть выполнено явно с помощью функции <i>Boolean(value)</i>. Правило преобразования: Значения, которые интуитивно «пустые», вроде <i>0</i>, <i>пустой строки</i>, <i>null</i>, <i>undefined</i> и <i>NaN</i>, становятся <i>false</i>. Все остальные значения становятся <i>true</i>.",
      "link": "",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "51",
      "question": "Какой результат выражения <i>1 + 2</i> правильный в JavaScrypt?",
      "explanation": "При сложении чисел они складываются по правилам математики. <i>Number + Number -> addition</i>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "3",
          "status": "true"
        },
        {
          "answer": "'12'",
          "status": "false"
        },
        {
          "answer": "'1' '+' '2'",
          "status": "false"
        },
        {
          "answer": "'1+2'",
          "status": "false"
        }
      ]
    },
    {
      "number": "52",
      "question": "Какой результат выражения <i>true + 1<i> правильный в JavaScrypt?",
      "explanation": "При сложении булевого значения с числом, первое преобразовывается в число (1 для true, 2 для false)",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "2",
          "status": "true"
        },
        {
          "answer": "'true + 1'",
          "status": "false"
        },
        {
          "answer": "1",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Выдаст ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "53",
      "question": "Какой результат выражения <i>false + false</i> правильный в JavaScrypt?",
      "explanation": "При сложении булевых значений, оба значения приводятся к типу number (1 для true, 2 для false)",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "0",
          "status": "true"
        },
        {
          "answer": "'false + false'",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "Выдаст ошибку",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        }
      ]
    },
    {
      "number": "54",
      "question": "Какой результат выражения <i>1 + '1'</i> правильный в JavaScrypt?",
      "explanation": "При выполнении операции сложения, если хотя бы один операнд является строкой, все остальные операнды преобразовываются в строку и конечный результат также будет строкой.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "'11'",
          "status": "true"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        },
        {
          "answer": "Будет ошибка",
          "status": "false"
        }
      ]
    },
    {
      "number": "55",
      "question": "Какой результат выражения <i>1 + 1 + '1'</i> правильный в JavaScrypt?",
      "explanation": "При выполнении операции сложения, если хотя бы один операнд является строкой, все остальные операнды преобразовываются в строку и конечный результат также будет строкой. При этом операции до первой строки выполняются, как обычно.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "'21'",
          "status": "true"
        },
        {
          "answer": "3",
          "status": "false"
        },
        {
          "answer": "'111'",
          "status": "false"
        },
        {
          "answer": "Будет ошибка",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        }
      ]
    },
    {
      "number": "56",
      "question": "Какой результат выражения <i>1 + '1' + 1</i> правильный в JavaScrypt?",
      "explanation": "При выполнении операции сложения, если хотя бы один операнд является строкой, все остальные операнды преобразовываются в строку и конечный результат также будет строкой. При этом операции до первой строки выполняются, как обычно.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "'111'",
          "status": "true"
        },
        {
          "answer": "111",
          "status": "false"
        },
        {
          "answer": "3",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Будет ошибка",
          "status": "false"
        },
        {
          "answer": "'21'",
          "status": "false"
        }
      ]
    },
    {
      "number": "57",
      "question": "Какой результат выражения <i>25 - '5'</i> правильный в JavaScrypt?",
      "explanation": "Арифметические операторы, кроме сложения, работают только с числами и пытаются привести все операнды к числам. Если это не удается сделать, результатом выражения будет NaN",
      "link": "",
      "answers": [
        {
          "answer": "20",
          "status": "true"
        },
        {
          "answer": "'255'",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "58",
      "question": "Какой результат выражения <i>'foo' + false</i>правильный в JavaScrypt?",
      "explanation": "При выполнении операции сложения, если хотя бы один операнд является строкой, все остальные операнды преобразовываются в строку и конечный результат также будет строкой. При этом операции до первой строки выполняются, как обычно.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Addition",
      "answers": [
        {
          "answer": "'foofalse'",
          "status": "true"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "'foo1'",
          "status": "false"
        }
      ]
    },
    {
      "number": "59",
      "question": "Какой результат выражения <i>10 * '80'</i> правильный в JavaScrypt?",
      "explanation": "Арифметические операторы, кроме сложения, работают только с числами и пытаются привести все операнды к числам. Если это не удается сделать, результатом выражения будет NaN",
      "link": "",
      "answers": [
        {
          "answer": "800",
          "status": "true"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "'1080'",
          "status": "false"
        }
      ]
    },
    {
      "number": "60",
      "question": "Какой результат выражения <i>3 * 'Николай'</i> правильный в JavaScrypt?",
      "explanation": "Арифметические операторы, кроме сложения, работают только с числами и пытаются привести все операнды к числам. Если это не удается сделать, результатом выражения будет NaN",
      "link": "",
      "answers": [
        {
          "answer": "NaN",
          "status": "true"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "'НиколайНиколайНиколай'",
          "status": "false"
        },
        {
          "answer": "3Николай",
          "status": "false"
        }
      ]
    },
    {
      "number": "61",
      "question": "Какой результат выражения <i>+true</i> правильный в JavaScrypt?",
      "explanation": "Унарный оператор сложения пытается преобразовать операнд в число.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "1",
          "status": "true"
        },
        {
          "answer": "0",
          "status": "false"
        },
        {
          "answer": "'+true'",
          "status": "false"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "62",
      "question": "Какой результат выражения <i>+false</i> правильный в JavaScrypt?",
      "explanation": "Унарный оператор сложения пытается преобразовать операнд в число.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "0",
          "status": "true"
        },
        {
          "answer": "1",
          "status": "false"
        },
        {
          "answer": "'+false'",
          "status": "false"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "63",
      "question": "Какой результат выражения <i>2++</i> правильный в JavaScrypt?",
      "explanation": "Инкремент и декремент можно применять только к переменным. Попытка применения их к числам вызовет ошибку.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "Вызовет ошибку",
          "status": "true"
        },
        {
          "answer": "3",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        }
      ]
    },
    {
      "number": "64",
      "question": "Какое значение будет присвоено переменной counter, если есть выражение <i>let counter = (8 + 2, 7 + 5);</i> в JavaScrypt?",
      "explanation": "Запятая предоставляет возможность вычислять несколько выражений, разделяя их. Выполняется каждое выражение, но возвращается результат только последнего. Данный оператор в основном используется внутри цикла for, что позволяет при каждом прохождении цикла одновременно обновлять значения нескольких переменных.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_operators",
      "answers": [
        {
          "answer": "12",
          "status": "true"
        },
        {
          "answer": "10",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "'(8 + 2, 7 + 5)'",
          "status": "false"
        }
      ]
    },
    {
      "number": "65",
      "question": "Какой результат выражения <i>'R' > 'T'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "66",
      "question": "Какой результат выражения <i>'С' > 'V'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "67",
      "question": "Какой результат выражения <i>'R' > 'r'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "68",
      "question": "Какой результат выражения <i>'радиатор' > 'Радиация'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "69",
      "question": "Какой результат выражения <i>'Зеленый' > 'озеленение'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "70",
      "question": "Какой результат выражения <i>'реле' > 'Рело'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "71",
      "question": "Какой результат выражения <i>'58' > 10</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "72",
      "question": "Какой результат выражения <i>13 > '17'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "73",
      "question": "Какой результат выражения <i>'13' > '013'</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Сравнение строк в JavaScrypt происходит посимвольно в алфавитном порядке. Чем дальше буква от начала алфавита, тем она имеет большее значение, например, ('Б' > 'А' даст true). Такой же принцип сохраняется и для слов ('Скрипт' > 'Скрипка' даст true, потому что 'т' > 'к'). Если при всех прочих равных количество символов в словах разное, больше будет слово с бОльшим количеством символов ('Слайдер' > 'Слайд' даст true). Если и в этом случае получается равенство, сравниваются регистры букв, при этом в таблице символов unicode, которую использет JavaScrypt, маленькие буквы имею Больший вес, чем большие ('Слайдер' > 'слайдер' даст false).",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "74",
      "question": "Какой результат выражения <i>'007' > 7</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "75",
      "question": "Какой результат выражения <i>'007' == 7</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "76",
      "question": "Какой результат выражения <i>true == 1</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "77",
      "question": "Какой результат выражения <i>false == 1</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "78",
      "question": "Какой результат выражения <i>false == 0</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "79",
      "question": "Какой результат выражения <i>'0' == 0</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "80",
      "question": "Какой результат выражения <i>let a = 0; Boolean(a);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "81",
      "question": "Какой результат выражения <i>let a = 1; Boolean(a);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "При сравнении разных типов данных они приводятся к единому типу - числовому.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "82",
      "question": "Какой результат выражения <i>'true' == true;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Результатом такого выражения будет false. Так как оба операнда отличаются по типу, для их сравнения они оба приводятся к числу. Строка 'true' в этом случае даст NaN, а булево значение true станет числом 1. NaN не равно 1",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "83",
      "question": "Какой результат выражения <i>'false' == false;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Результатом такого выражения будет false. Так как оба операнда отличаются по типу, для их сравнения они оба приводятся к числу. Строка 'false' в этом случае даст NaN, а булево значение false станет числом 0. NaN не равно 0",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "84",
      "question": "Какой результат выражения <i>'0' === false;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Оператор <i>===</i> сравнивает без приведения типов, то есть, буквально",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "85",
      "question": "Какой результат выражения <i>0 === false;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Оператор <i>===</i> сравнивает без приведения типов, то есть, буквально",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "86",
      "question": "Какой результат выражения <i>0 !== false;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Оператор <i>===</i> сравнивает без приведения типов, то есть, буквально",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "87",
      "question": "Какой результат выражения <i>null === undefined;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Оператор <i>===</i> сравнивает без приведения типов, то есть, буквально",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "88",
      "question": "Какой результат выражения <i>null == undefined;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды <i>null</i> и <i>undefined</i> при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "89",
      "question": "Какой результат выражения <i>null == 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды <i>null</i> и <i>undefined</i> при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "90",
      "question": "Какой результат выражения <i>undefined == 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды <i>null</i> и <i>undefined</i> при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "91",
      "question": "Какой результат выражения <i>null > 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды null и undefined при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt. Соответственно, при сравнении его с чем либо, кроме null и undefined выражение всегда даст false.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "92",
      "question": "Какой результат выражения <i>null == 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды null и undefined при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt. Соответственно, при сравнении его с чем либо, кроме null и undefined выражение всегда даст false.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "93",
      "question": "Какой результат выражения <i>null >= 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды null и undefined при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt. Однако существует особенность языка, согласно которому при сравнении операторами > или < аналогичное выражение с противоположными операторами <= и >= ватоматически даст противоположный результат. Это один из способов сэкономить ресурсы при вычислении. Так, например, 8 < 9 даст true, за счет чего 8 >= 9 даст false автоматически, что сэкономит ресурсы вычисления. null > 0 это false, значит автоматически null <= 0 даст true.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "94",
      "question": "Какой результат выражения <i>null > 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Операнды null и undefined при нестрогом сравнении будут равны между собой и не равны больше ничему. Это специальное правило языка JavaScrypt. Однако существует особенность языка, согласно которому при сравнении операторами > или < аналогичное выражение с противоположными операторами <= и >= ватоматически даст противоположный результат. Это один из способов сэкономить ресурсы при вычислении. Так, например, 8 < 9 даст true, за счет чего 8 >= 9 даст false автоматически, что сэкономит ресурсы вычисления. null > 0 это false, значит автоматически null <= 0 даст true.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "95",
      "question": "Какой результат выражения <i>Boolean(null);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Значение, переданное первым параметром, при необходимости преобразуется в логическое значение. Если значение опущено или равно 0, -0, null, false, NaN, undefined или пустой строке (''), объект имеет начальное значение, равное false. Все остальные значения, включая любые объекты или строку 'false', создают объект с начальным значением, равным true.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "96",
      "question": "Какой результат выражения <i>Number(null);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Приводя <i>null</i> к численному типу данных оно всегда равно 0",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number",
      "answers": [
        {
          "answer": "0",
          "status": "true"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "97",
      "question": "Какой результат выражения <i>Number(undefined);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Undefined не может быть преобразован в число. При попытке преобразовать вернет NaN",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number",
      "answers": [
        {
          "answer": "NaN",
          "status": "true"
        },
        {
          "answer": "0",
          "status": "false"
        },
        {
          "answer": "1",
          "status": "false"
        },
        {
          "answer": "Вернет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "98",
      "question": "Какой результат выражения <i>Boolean(undefined);</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Значение, переданное первым параметром, при необходимости преобразуется в логическое значение. Если значение опущено или равно 0, -0, null, false, NaN, undefined или пустой строке (''), объект имеет начальное значение, равное false. Все остальные значения, включая любые объекты или строку 'false', создают объект с начальным значением, равным true.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "99",
      "question": "Какой результат выражения <i>undefined > 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Результатом любого сравнения undefined с 0 будет false",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "100",
      "question": "Какой результат выражения <i>undefined == 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Результатом любого сравнения undefined с 0 будет false",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "101",
      "question": "Какой результат выражения <i>undefined >= 0;</i> будет правильным в JavaScrypt? Объяснить, почему.",
      "explanation": "Результатом любого сравнения undefined с 0 будет false",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/undefined",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "NaN",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "102",
      "question": "В каком направлении происходит вычисление выражения с оператором или ( <i>||</i> ) в JavaScrypt?",
      "explanation": "Операнды вычисляются слева направо.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "Слева направо",
          "status": "true"
        },
        {
          "answer": "Справа налево",
          "status": "false"
        },
        {
          "answer": "Впроизвольном порядке",
          "status": "false"
        }
      ]
    },
    {
      "number": "103",
      "question": "Какое значение вернет выражение <i>3 > 2 || 16 < 20</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат true, так как оба сравнения преобразуются в булево значение и результатом второго будет true, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "3",
          "status": "false"
        },
        {
          "answer": "3 > 2",
          "status": "false"
        },
        {
          "answer": "16 < 20",
          "status": "false"
        },
        {
          "answer": "16",
          "status": "false"
        }
      ]
    },
    {
      "number": "104",
      "question": "Какое значение вернет выражение <i>10 > 7 || 13 < 14</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат true, так как оба сравнения преобразуются в булево значение и результатом второго будет true, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "10 > 7",
          "status": "false"
        },
        {
          "answer": "13 < 14",
          "status": "false"
        },
        {
          "answer": "14",
          "status": "false"
        }
      ]
    },
    {
      "number": "105",
      "question": "Какое значение вернет выражение <i>true || true</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "106",
      "question": "Какое значение вернет выражение <i>false || true</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "107",
      "question": "Какое значение вернет выражение <i>true || false</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат true, так как оператор || возвращает первое значение true, которое встретит, и прекращает свою работу.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "108",
      "question": "Какое значение вернет выражение <i>false || false</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат false, так как оба false, а оператор || возвращает первое значение true, которое встретит, и прекращает свою работу, но в случае, если значение true не встречается вообще, возвращает последний false.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "109",
      "question": "Какое значение вернет выражение <i>12 || 26</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат 12, так как перед сравнением числа будут приведены к булевому типу, где и 12 и 26 станут true. Оператор 'или' остановит работу, как только встретит первое значение true и вернет его исходное значение. В данном случае это 12.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "12",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "26",
          "status": "false"
        }
      ]
    },
    {
      "number": "110",
      "question": "Какое значение вернет выражение <i>0 || 26</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат 26, так как перед сравнением числа будут приведены к булевому типу, где 0 - это false, а 26 - это true. Оператор 'или' остановит работу, как только встретит первое значение true и вернет его исходное значение. В данном случае это 26.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "26",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "111",
      "question": "Какое значение вернет выражение <i>0 || null</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат null, так как перед сравнением операнды будут приведены к булевому типу, где 0 и null - это false. Оператор 'или' остановит работу, как только встретит первое значение true и вернет его исходное значение. Если все операнды false, пернет исходное значение последнего из них, а это null.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "null",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "112",
      "question": "Какое значение вернет выражение <i>0 || undefined</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Результат undefined, так как перед сравнением операнды будут приведены к булевому типу, где 0 и undefined - это false. Оператор 'или' остановит работу, как только встретит первое значение true и вернет его исходное значение. Если все операнды false, пернет исходное значение последнего из них, а это undefined.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_OR",
      "answers": [
        {
          "answer": "undefined",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "113",
      "question": "Какое значение вернет выражение <i>true && true</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "114",
      "question": "Какое значение вернет выражение <i>false && true</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "115",
      "question": "Какое значение вернет выражение <i>true && false</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "116",
      "question": "Какое значение вернет выражение <i>false && false</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "117",
      "question": "Какое значение вернет выражение <i>36 && 18</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "18",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "36",
          "status": "false"
        }
      ]
    },
    {
      "number": "118",
      "question": "Какое значение вернет выражение <i>0 && 18</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "0",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "18",
          "status": "false"
        }
      ]
    },
    {
      "number": "119",
      "question": "Какое значение вернет выражение <i>18 && null</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "null",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "18",
          "status": "false"
        }
      ]
    },
    {
      "number": "120",
      "question": "Какое значение вернет выражение <i>undefined && null</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "undefined",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "121",
      "question": "Какое значение вернет выражение <i>36 && ''</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && (логическое и) вычисляет операндыслева направо, каждый из нихприводится к логическому типу. Если результат false, останавливается и возвращает исходное значение этого операнда. Если все операнды true, возвращает значение последнего",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_AND",
      "answers": [
        {
          "answer": "''",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "36",
          "status": "false"
        }
      ]
    },
    {
      "number": "122",
      "question": "Какое значение вернет выражение <i>1 && 0 || 2 && 3</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && имеет приоритет выше, чем ||. Значит выражение можно преобразовать в true && false || true && true, а затем в false || true (0 || 3), где оператор || вернет 3",
      "link": "",
      "answers": [
        {
          "answer": "3",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        },
        {
          "answer": "1",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "123",
      "question": "Какое значение вернет выражение <i>1 || 0 && 2 || 3</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор && имеет приоритет выше, чем ||. Значит выражение можно преобразовать в true || false && true || true, а затем в true || false || true (1 || 0 || 3), где оператор || вернет 1",
      "link": "",
      "answers": [
        {
          "answer": "1",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "false",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        },
        {
          "answer": "3",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "124",
      "question": "Какое значение вернет выражение <i>!true</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "125",
      "question": "Какое значение вернет выражение <i>!null</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "126",
      "question": "Какое значение вернет выражение <i>!1</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "127",
      "question": "Какое значение вернет выражение <i>!''</i> в JavaScrypt (пустая строка)? Объяснить выбор",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
      "answers": [
        {
          "answer": "true",
          "status": "true"
        },
        {
          "answer": "false",
          "status": "false"
        }
      ]
    },
    {
      "number": "128",
      "question": "Какое значение вернет выражение <i>!'Эллинберг'</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Оператор ! (логическое не) в JavaScrypt сначала приводит операнды к логическому типу, а затем возвращает противоположное значение.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        }
      ]
    },
    {
      "number": "129",
      "question": "Какое значение вернет выражение <i>!true && 58 || 18 && !1</i> в JavaScrypt? Объяснить выбор",
      "explanation": "Наивысший приоритет имеет ! (логическое не), затем идет && (логические и), а на последнем месте || (логическое или).",
      "link": "",
      "answers": [
        {
          "answer": "false",
          "status": "true"
        },
        {
          "answer": "true",
          "status": "false"
        },
        {
          "answer": "58",
          "status": "false"
        },
        {
          "answer": "18",
          "status": "false"
        },
        {
          "answer": "1",
          "status": "false"
        }
      ]
    },
    {
      "number": "130",
      "question": "Какое значение вернет указанное выражение в JavaScrypt? Объяснить выбор. <img src='assets/img/questions/juniorJsQuiz/130.jpg'>",
      "explanation": "Выражение вернет значение 'Без имени', так как оператор сравнения с null (нулевого слияния) возвращает первый аргумент, если он не null и не undefined, иначе второй.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
      "answers": [
        {
          "answer": "'Без имени'",
          "status": "true"
        },
        {
          "answer": "name",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "131",
      "question": "Какое значение вернет указанное выражение в JavaScrypt? Объяснить выбор. <img src='assets/img/questions/juniorJsQuiz/131.jpg'>",
      "explanation": "Выражение вернет значение 'Руслан', так как оператор сравнения с null (нулевого слияния) возвращает первый аргумент, если он не null и не undefined, иначе второй.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
      "answers": [
        {
          "answer": "'Руслан'",
          "status": "true"
        },
        {
          "answer": "'Без имени'",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        }
      ]
    },
    {
      "number": "132",
      "question": "Выполнится ли произdольный код в JavaScrypt? Объяснить, почему. <img src='assets/img/questions/juniorJsQuiz/132.jpg'>",
      "explanation": "Код выполнится, так как выражение в скобках вернет true. ",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else",
      "answers": [
        {
          "answer": "Выполнится",
          "status": "true"
        },
        {
          "answer": "Не выполнится",
          "status": "false"
        }
      ]
    },
    {
      "number": "133",
      "question": "Выполнится ли проивзольный код в JavaScrypt? Объяснить, почему. <img src='assets/img/questions/juniorJsQuiz/133.jpg'>",
      "explanation": "Код не выполнится, так как выражение в скобках вернет false. ",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else",
      "answers": [
        {
          "answer": "Не выполнится",
          "status": "true"
        },
        {
          "answer": "Выполнится",
          "status": "false"
        }
      ]
    },
    {
      "number": "134",
      "question": "Выполнится ли проивзольный код в JavaScrypt? Объяснить, почему. <img src='assets/img/questions/juniorJsQuiz/134.jpg'>",
      "explanation": "Код выполнится, так как выражение в скобках вернет true. ",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else",
      "answers": [
        {
          "answer": "Выполнится",
          "status": "true"
        },
        {
          "answer": "Не выполнится",
          "status": "false"
        }
      ]
    },
    {
      "number": "135",
      "question": "Выполнится ли проивзольный код в JavaScrypt? Объяснить, почему. <img src='assets/img/questions/juniorJsQuiz/135.jpg'>",
      "explanation": "Код выполнится, так как выражение в скобках вернет true. ",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/if...else",
      "answers": [
        {
          "answer": "Выполнится",
          "status": "true"
        },
        {
          "answer": "Не выполнится",
          "status": "false"
        }
      ]
    },
    {
      "number": "136",
      "question": "Можно ли использовать условный тернарный оператор в JavaScrypt для присвоения переменной значения?",
      "explanation": "Можно. Пример: <i>const elvisLives = Math.PI > 4 ? 'Да' : 'Нет';</i> В итоге переменной <i>elvisLives</i> присвоится значение 'Нет'",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Conditional_operator",
      "answers": [
        {
          "answer": "Можно",
          "status": "true"
        },
        {
          "answer": "Нельзя",
          "status": "false"
        }
      ]
    },
    {
      "number": "137",
      "question": "Какое последнее значение переменной num будет выведено вконсоль JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/137.jpg'>",
      "explanation": "4, так как ее изменение происходит после вывода в консоль",
      "link": "",
      "answers": [
        {
          "answer": "4",
          "status": "true"
        },
        {
          "answer": "5",
          "status": "false"
        },
        {
          "answer": "6",
          "status": "false"
        },
        {
          "answer": "3",
          "status": "false"
        }
      ]
    },
    {
      "number": "138",
      "question": "Какое последнее значение переменной num будет выведено в консоль JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/138.jpg'>",
      "explanation": "5, так как ее изменение происходит перед выводом в консоль",
      "link": "",
      "answers": [
        {
          "answer": "5",
          "status": "true"
        },
        {
          "answer": "4",
          "status": "false"
        },
        {
          "answer": "6",
          "status": "false"
        },
        {
          "answer": "3",
          "status": "false"
        }
      ]
    },
    {
      "number": "139",
      "question": "Какое последнее значение переменной num будет выведено в консоль JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/139.jpg'>",
      "explanation": "0, так как цикл do...while используется тогда, когда нам необходимо выполнение тела цикла хотя бы 1 раз, независимо от того, вернет условия true или нет.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration#цикл_do...while",
      "answers": [
        {
          "answer": "0",
          "status": "true"
        },
        {
          "answer": "1",
          "status": "false"
        },
        {
          "answer": "Выведет ошибку",
          "status": "false"
        },
        {
          "answer": "-1",
          "status": "false"
        }
      ]
    },
    {
      "number": "140",
      "question": "Какое последнее значение переменной <i>num</i> будет выведено в консоль JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/140.jpg'>",
      "explanation": "4, так как изменение переменной <i>num</i> происходит после ее вывода в консоль",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration#цикл_do...while",
      "answers": [
        {
          "answer": "4",
          "status": "true"
        },
        {
          "answer": "5",
          "status": "false"
        },
        {
          "answer": "6",
          "status": "false"
        },
        {
          "answer": "0",
          "status": "false"
        }
      ]
    },
    {
      "number": "141",
      "question": "Какие значения будт выведены в консоль в результате выполнения следующего кода JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/141.jpg'>",
      "explanation": "Опенраторы <i>continue</i> и <i>break</i> нельзя использовать с оператором <i>?</i>",
      "link": "",
      "answers": [
        {
          "answer": "Вызовет ошибку",
          "status": "true"
        },
        {
          "answer": "0, 1, 3, 4",
          "status": "false"
        },
        {
          "answer": "0, 1, 3, 4, 5",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        }
      ]
    },
    {
      "number": "142",
      "question": "Какие значения будт выведены в консоль в результате выполнения следующего кода JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/142.jpg'>",
      "explanation": "Опенраторы <i>continue</i> и <i>break</i> нельзя использовать с оператором <i>?</i>",
      "link": "",
      "answers": [
        {
          "answer": "Вызовет ошибку",
          "status": "true"
        },
        {
          "answer": "0, 1",
          "status": "false"
        },
        {
          "answer": "0, 1, 3, 4",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        }
      ]
    },
    {
      "number": "143",
      "question": "Какие значения будт выведены в консоль в результате выполнения следующего кода JavaScrypt? <img src='assets/img/questions/juniorJsQuiz/143.jpg'>",
      "explanation": "При помощи метки <i>break</i> прерывает работу внешнего цикла из внутреннего, когда выполняется указанное условия.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/label",
      "answers": [
        {
          "answer": "0, 1",
          "status": "true"
        },
        {
          "answer": "Вызовет ошибку",
          "status": "false"
        },
        {
          "answer": "0, 1, 2",
          "status": "false"
        },
        {
          "answer": "2",
          "status": "false"
        }
      ]
    },
    {
      "number": "144",
      "question": "Когда проверяется условие цикла while в JavaScrypt?",
      "explanation": "<img src='assets/img/questions/juniorJsQuiz/144.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/while",
      "answers": [
        {
          "answer": "Условие проверяется перед каждой итерацией",
          "status": "true"
        },
        {
          "answer": "Условие проверяется после каждой итерации",
          "status": "false"
        }
      ]
    },
    {
      "number": "145",
      "question": "Когда проверяется условие цикла do...while в JavaScrypt?",
      "explanation": "<img src='assets/img/questions/juniorJsQuiz/145.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/do...while",
      "answers": [
        {
          "answer": "Условие проверяется после каждой итерации",
          "status": "true"
        },
        {
          "answer": "Условие проверяется перед каждой итерацией",
          "status": "false"
        }
      ]
    },
    {
      "number": "146",
      "question": "Когда проверяется условие цикла for в JavaScrypt?",
      "explanation": "<img src='assets/img/questions/juniorJsQuiz/146.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for",
      "answers": [
        {
          "answer": "Условие проверяется перед каждой итерацией",
          "status": "true"
        },
        {
          "answer": "Условие проверяется после каждой итерации",
          "status": "false"
        }
      ]
    },
    {
      "number": "147",
      "question": "Выполнится ли код в JavaScrypt, если указанная функция будет вызвана до того, как она была обьявлена в коде?<img src='assets/img/questions/juniorJsQuiz/147.jpg'>",
      "explanation": "Выполнится, так как объявленная функция может быть вызвана в любом месте кода, но в пределах текущего блока или функции",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/function",
      "answers": [
        {
          "answer": "Да",
          "status": "true"
        },
        {
          "answer": "Нет",
          "status": "false"
        }
      ]
    },
    {
      "number": "148",
      "question": "Какой метод позволяет спланировать вызов функции один раз через определенный промежуток времени в JavaScript?",
      "explanation": "setTimeout() обеспечивает вызов функции или выполнение фрагмента кода после указанной задержки. <img src='assets/img/questions/juniorJsQuiz/148.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/API/setTimeout",
      "answers": [
        {
          "answer": "setTimeout()",
          "status": "true"
        },
        {
          "answer": "setInterval()",
          "status": "false"
        },
        {
          "answer": "new Time",
          "status": "false"
        },
        {
          "answer": "new Date",
          "status": "false"
        }
      ]
    },
    {
      "number": "149",
      "question": "Какой метод позволяет спланировать многократный вызов функции через определенные равные промежутки времени в JavaScript?",
      "explanation": "setInterval() обеспечивает вызов функции или выполнение фрагмента кода после указанной задержки. <img src='assets/img/questions/juniorJsQuiz/149.jpg'>",
      "link": "https://developer.mozilla.org/ru/docs/Web/API/setInterval",
      "answers": [
        {
          "answer": "setInterval()",
          "status": "true"
        },
        {
          "answer": "setTimeout()",
          "status": "false"
        },
        {
          "answer": "new Time",
          "status": "false"
        },
        {
          "answer": "new Date",
          "status": "false"
        }
      ]
    },
    {
      "number": "150",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/150.jpg'>",
      "explanation": "Если значение переменной, выступающей в роли свойства объекта, является строкой, обратиться к значению этого свойства можно, заключив строку в кавычки и квадратные скобки.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "151",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/151.jpg'>",
      "explanation": "Если значение переменной, выступающей в роли свойства объекта, является строкой, обратиться к значению этого свойства можно, заключив строку в кавычки и квадратные скобки.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Возникнет ошибка",
          "status": "true"
        },
        {
          "answer": "Александр",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "152",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/152.jpg'>",
      "explanation": "Если в роли свойства объекта выступает переменная, обратиться к значению этого свойства можно, заключив апеременную в квадратные скобки.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "153",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/153.jpg'>",
      "explanation": "Если какой-либо переменной присвоить свойство объекта, вызваеть его значение можно при помощи этой же переменной, заключенной в квадратные скобки",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "30",
          "status": "true"
        },
        {
          "answer": "Александр",
          "status": "false"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "154",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/154.jpg'>",
      "explanation": "Если какой-либо переменной присвоить свойство объекта, вызваеть его значение можно при помощи этой же переменной, заключенной в квадратные скобки. Вызов через точку будет невозможен, так как обращение идет не к самому свойству, а к переменной, которая его содержит.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "undefined",
          "status": "true"
        },
        {
          "answer": "30",
          "status": "false"
        },
        {
          "answer": "Александр",
          "status": "false"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "155",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/155.jpg'>",
      "explanation": "Чтобы получить значение свойства объекта, к нему необходимо обратиться через точку.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "30",
          "status": "false"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "156",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/156.jpg'>",
      "explanation": "При попытке обратиться к свойству объекта, как к переменной, используя квадратные скобки, возникнет ошибка, так как такая переменная не была обьявлена.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Возникнет ошибка",
          "status": "true"
        },
        {
          "answer": "Александр",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "30",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "157",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/157.jpg'>",
      "explanation": "Чтобы получить значение свойства объекта, к нему необходимо обратиться через точку, либо в квадратных скобках, используя кавычки.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "158",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/158.jpg'>",
      "explanation": "Чтобы получить значение свойства объекта, к нему необходимо обратиться через точку, либо в квадратных скобках, используя кавычки.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "159",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/159.jpg'>",
      "explanation": "Именем свойства в объекте может быть либо строка, либо символ (Symbol), по этомуможно обратиться несколькими способами",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "160",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/160.jpg'>",
      "explanation": "Именем свойства в объекте может быть либо строка, либо символ, по этому можно обратиться к нему несколькими способами, в том числе и как к строке",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Александр",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "161",
      "question": "Что выведет консоль, если обратиться к свойству объекта JavaScript таким образом? <img src='assets/img/questions/juniorJsQuiz/161.jpg'>",
      "explanation": "Для имен свойств объекта можно использовать любые слова, в том числе зарезервированные JavaScript, например, let, const, for и т.д.",
      "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Working_with_objects",
      "answers": [
        {
          "answer": "Сергеевич",
          "status": "true"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        },
        {
          "answer": "undefined",
          "status": "false"
        },
        {
          "answer": "null",
          "status": "false"
        }
      ]
    },
    {
      "number": "162",
      "question": "Что выведется в консоль при выполнении следующего примера в JavaScript? <img src='assets/img/questions/juniorJsQuiz/162.jpg'>",
      "explanation": "Так как действия выполняются последовательно слева направо, каждое действие отделено от другого оператором <i>||</i>, получается, что первое действие даст <i>false</i>, так как userName не равно 'Олег', а второе действие 'Иван' даст 'true', так как это не пустая строка. На примере в скобки взято каждое отдельно действие <img src='assets/img/questions/juniorJsQuiz/162_1.jpg'>",
      "link": "",
      "answers": [
        {
          "answer": "Доступ выдан",
          "status": "true"
        },
        {
          "answer": "Доступ запрещен",
          "status": "false"
        },
        {
          "answer": "Возникнет ошибка",
          "status": "false"
        }
      ]
    },
    {
      "number": "163",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "164",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "165",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "166",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "167",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "168",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "169",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "170",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "171",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "172",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "173",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "174",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "175",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "176",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "177",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "178",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "179",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "180",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "181",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "182",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "183",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "184",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "185",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "186",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "187",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "188",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "189",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "190",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "191",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "192",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "193",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "194",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "195",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "196",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "197",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "198",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "199",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "200",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "201",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "202",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "203",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "204",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "205",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "206",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "207",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "208",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "209",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "210",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "211",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "212",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    },
    {
      "number": "213",
      "question": "",
      "explanation": "",
      "link": "",
      "answers": [
        {
          "answer": "",
          "status": "true"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        },
        {
          "answer": "",
          "status": "false"
        }
      ]
    }
  ]
}